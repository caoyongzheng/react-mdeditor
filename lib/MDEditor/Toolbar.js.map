{"version":3,"sources":["../../src/MDEditor/Toolbar.jsx"],"names":[],"mappings":"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","file":"Toolbar.js","sourcesContent":["import React, { PropTypes } from 'react'\n\nimport icons from './icons.json'\nimport Item from './Item'\nimport SvgIcon from '../SvgIcon/SvgIcon'\nimport _ from 'lodash'\n\nconst styles = {\n  toolBar: {\n    float: 'left',\n  },\n  list: {\n    listStyle: 'none',\n  },\n  listItem: {\n    float: 'left',\n    height: '40px',\n    lineHeight: '42px',\n    textAligin: 'center',\n    border: '1px solid transparent',\n    textShadow: '0 1px 0 #fff',\n    margin: '-1px 0px -1px -1px',\n    cursor: 'pointer',\n    fontSize: '11px',\n    padding: '0 12px',\n  },\n  hover: {\n    backgroundColor: '#fafafa',\n    color: '#444',\n    border: '1px solid rgba(0, 0, 0, 0.1)',\n  },\n}\n\nconst Icons = [\n  'bold',\n  'italic',\n  'strike',\n  'link',\n  'image',\n  'blockquote',\n  'unorderedList',\n  'orderedList',\n]\n\nconst FORMATS = {\n  bold: { type: 'inline', token: 'strong', before: '**', after: '**', placeholder: 'bold text' },\n  italic: { type: 'inline', token: 'em', before: '_', after: '_', placeholder: 'italic text' },\n  strike: { type: 'inline', token: 'strike', before: '~~', after: '~~',\n    placeholder: 'strike text' },\n  link: { type: 'inline', token: 'link', before: '[', after: ']()', placeholder: 'href title' },\n  image: { type: 'inline', token: 'tag', before: '![', after: ']()', placeholder: 'image title' },\n  blockquote: { type: 'block', token: 'quote', before: '>', re: /^>\\s+/, placeholder: 'quote' },\n  unorderedList: { type: 'block', token: 'variable-2', before: '* ', re: /^[\\*\\-]\\s+/,\n    placeholder: 'unorderedList' },\n  orderedList: { type: 'block', token: 'variable-2', before: '1. ', re: /^\\d+\\.\\s+/,\n    placeholder: 'orderedList' },\n}\n\nconst FORMAT_TOKENS = {}\n\nObject.keys(FORMATS).forEach(key => {\n  if (FORMATS[key].token) {\n    if (FORMAT_TOKENS[FORMATS[key].token]) {\n      FORMAT_TOKENS[FORMATS[key].token] += `,${key}`\n    } else {\n      FORMAT_TOKENS[FORMATS[key].token] = key\n    }\n  }\n})\n\n\nfunction getCursorState(cm, pos) {\n  pos = pos || cm.getCursor('start')\n  const cs = {}\n  const token = cs.token = cm.getTokenAt(pos)\n  if (!token.type) return cs\n  const tokens = token.type.split(' ')\n  tokens.forEach(t => {\n    if (FORMAT_TOKENS[t]) {\n      FORMAT_TOKENS[t].split(',').forEach(key => {\n        cs[key] = true\n      })\n      return\n    }\n  })\n  return cs\n}\n\nconst operations = {\n  inlineApply(cm, format) {\n    const startPoint = cm.getCursor('start')\n    const endPoint = cm.getCursor('end')\n\n    cm.replaceSelection(format.before + cm.getSelection() + format.after)\n    startPoint.ch += format.before.length\n    endPoint.ch += format.before.length\n    cm.setSelection(startPoint, endPoint)\n    cm.focus()\n  },\n  inlineRemove(cm, format) {\n    const startPoint = cm.getCursor('start')\n    const endPoint = cm.getCursor('end')\n    const line = cm.getLine(startPoint.line)\n\n    let startPos = startPoint.ch\n    while (startPos) {\n      if (line.substr(startPos, format.before.length) === format.before) {\n        break\n      }\n      startPos--\n    }\n\n    let endPos = endPoint.ch\n    while (endPos <= line.length) {\n      if (line.substr(endPos, format.after.length) === format.after) {\n        break\n      }\n      endPos++\n    }\n\n    const start = line.slice(0, startPos)\n    const mid = line.slice(startPos + format.before.length, endPos)\n    const end = line.slice(endPos + format.after.length)\n    cm.replaceRange(start + mid + end, { line: startPoint.line, ch: 0 },\n      { line: startPoint.line, ch: line.length + 1 })\n    cm.setSelection({ line: startPoint.line, ch: start.length },\n      { line: startPoint.line, ch: (start + mid).length })\n    cm.focus()\n  },\n  blockApply(cm, format) {\n    const startPoint = cm.getCursor('start')\n    const line = cm.getLine(startPoint.line)\n    const text = `${format.before} ${line.length ? line : format.placeholder}`\n    cm.replaceRange(text, { line: startPoint.line, ch: 0 },\n      { line: startPoint.line, ch: line.length + 1 })\n    cm.setSelection({ line: startPoint.line, ch: format.before.length + 1 },\n      { line: startPoint.line, ch: text.length })\n    cm.focus()\n  },\n  blockRemove(cm, format) {\n    const startPoint = cm.getCursor('start')\n    const line = cm.getLine(startPoint.line)\n    const text = line.replace(format.re, '')\n    cm.replaceRange(text, { line: startPoint.line, ch: 0 },\n      { line: startPoint.line, ch: line.length + 1 })\n    cm.setSelection({ line: startPoint.line, ch: 0 },\n      { line: startPoint.line, ch: text.length })\n    cm.focus()\n  },\n}\n\nfunction applyFormat(getCM, key) {\n  const cm = getCM()\n  const cs = getCursorState(cm)\n  const format = FORMATS[key]\n  operations[format.type + (cs[key] ? 'Remove' : 'Apply')](cm, format)\n}\n\nfunction ToolBar({ getCM, hide }) {\n  const toolBarStyles = _.merge({}, styles.toolBar)\n  if (hide) {\n    _.merge(toolBarStyles, { display: 'none' })\n  }\n  return (\n    <div style={toolBarStyles}>\n      <ul style={styles.list}>\n        {\n          Icons.map((icon, i) =>\n            <Item\n              key={i}\n              style={styles.listItem}\n              onClick={() => applyFormat(getCM, icon)}\n              hoverStyle={styles.hover}\n            >\n              <SvgIcon {...icons[icon]} />\n            </Item>\n          )\n        }\n      </ul>\n    </div>\n  )\n}\n\nToolBar.propTypes = {\n  getCM: PropTypes.func,\n  hide: PropTypes.bool,\n}\n\nexport default ToolBar\n"]}