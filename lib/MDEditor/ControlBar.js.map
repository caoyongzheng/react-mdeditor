{"version":3,"sources":["../../src/MDEditor/ControlBar.jsx"],"names":[],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAM,SAAS;AACb,cAAY;AACV,WAAO;AADG,GADC;AAIb,QAAM;AACJ,eAAW,MADP;AAEJ,WAAO;AAFH,GAJO;AAQb,YAAU;AACR,WAAO,MADC;AAER,YAAQ,MAFA;AAGR,gBAAY,MAHJ;AAIR,gBAAY,QAJJ;AAKR,YAAQ,uBALA;AAMR,gBAAY,cANJ;AAOR,YAAQ,kBAPA;AAQR,YAAQ,SARA;AASR,cAAU,MATF;AAUR,aAAS,QAVD;AAWR,WAAO;AAXC,GARG;AAqBb,UAAQ;AACN,qBAAiB,SADX;AAEN,YAAQ;AAFF,GArBK;AAyBb,SAAO;AACL,qBAAiB,SADZ;AAEL,YAAQ;AAFH;AAzBM,CAAf;;AA+BA,SAAS,UAAT,OAAsF;AAAA,MAAhE,IAAgE,QAAhE,IAAgE;AAAA,MAA1D,MAA0D,QAA1D,MAA0D;AAAA,MAAlD,cAAkD,QAAlD,cAAkD;AAAA,MAAlC,UAAkC,QAAlC,UAAkC;AAAA,MAAtB,kBAAsB,QAAtB,kBAAsB;;AACpF,MAAM,YAAY,iBAAE,KAAF,CAAQ,EAAR,EAAY,OAAO,QAAnB,CAAlB;AACA,MAAM,kBAAkB,iBAAE,KAAF,CAAQ,EAAR,EAAY,SAAZ,EAAuB,OAAO,MAA9B,CAAxB;AACA,SACE;AAAA;AAAA,MAAK,OAAO,OAAO,UAAnB;AACE;AAAA;AAAA,QAAI,OAAO,OAAO,IAAlB;AAEI,eAAS,KAAT,GACE;AAAA;AAAA;AACE,eAAI,MADN;AAEE,iBAAO,WAAW,MAAX,GAAoB,eAApB,GAAsC,SAF/C;AAGE,mBAAS;AAAA,mBAAM,eAAe,MAAf,CAAN;AAAA,WAHX;AAIE,sBAAY,OAAO;AAJrB;AAME;AAAA;AAAA,YAAG,OAAO,OAAO,SAAjB;AAA6B;AAA7B;AANF,OADF,GAQY,IAVhB;AAaI,eAAS,KAAT,GACE;AAAA;AAAA;AACE,eAAI,SADN;AAEE,iBAAO,WAAW,SAAX,GAAuB,eAAvB,GAAyC,SAFlD;AAGE,mBAAS;AAAA,mBAAM,eAAe,SAAf,CAAN;AAAA,WAHX;AAIE,sBAAY,OAAO;AAJrB;AAME;AAAA;AAAA,YAAM,OAAO,OAAO,SAApB;AAAgC;AAAhC;AANF,OADF,GAQY,IArBhB;AAuBE;AAAA;AAAA;AACE,eAAI,YADN;AAEE,iBAAO,SAFT;AAGE,sBAAY,OAAO,KAHrB;AAIE,mBAAS;AAJX;AAME,yDAAc,aAAa,gBAAM,MAAnB,GAA4B,gBAAM,MAAhD;AANF;AAvBF;AADF,GADF;AAoCD;AACD,WAAW,SAAX,GAAuB;AACrB,QAAM,iBAAU,KAAV,CAAgB,CAAC,KAAD,EAAQ,OAAR,CAAhB,EAAkC,UADnB;AAErB,UAAQ,iBAAU,MAAV,CAAiB,UAFJ;AAGrB,kBAAgB,iBAAU,IAAV,CAAe,UAHV;AAIrB,cAAY,iBAAU,IAAV,CAAe,UAJN;AAKrB,sBAAoB,iBAAU,IAAV,CAAe;AALd,CAAvB;kBAOe,U","file":"ControlBar.js","sourcesContent":["import React, { PropTypes } from 'react'\n\nimport _ from 'lodash'\nimport icons from './icons.json'\nimport SvgIcon from '../SvgIcon/SvgIcon'\nimport Item from './Item'\n\nconst styles = {\n  controlBar: {\n    float: 'right',\n  },\n  list: {\n    listStyle: 'none',\n    float: 'left',\n  },\n  listItem: {\n    float: 'left',\n    height: '40px',\n    lineHeight: '40px',\n    textAligin: 'center',\n    border: '1px solid transparent',\n    textShadow: '0 1px 0 #fff',\n    margin: '-1px -1px -1px 0',\n    cursor: 'pointer',\n    fontSize: '11px',\n    padding: '0 15px',\n    color: '#444',\n  },\n  active: {\n    backgroundColor: '#fafafa',\n    border: '1px solid rgba(0, 0, 0, 0.1)',\n  },\n  hover: {\n    backgroundColor: '#fafafa',\n    border: '1px solid rgba(0, 0, 0, 0.1)',\n  },\n}\n\nfunction ControlBar({ mode, active, onActiveChange, fullscreen, onFullScreenChange }) {\n  const itemStyle = _.merge({}, styles.listItem)\n  const activeItemStyle = _.merge({}, itemStyle, styles.active)\n  return (\n    <div style={styles.controlBar}>\n      <ul style={styles.list}>\n        {\n          mode === 'tab' ?\n            <Item\n              key=\"code\"\n              style={active === 'code' ? activeItemStyle : itemStyle}\n              onClick={() => onActiveChange('code')}\n              hoverStyle={styles.hover}\n            >\n              <a style={styles.listItemA}>{'Markdown'}</a>\n            </Item> : null\n        }\n        {\n          mode === 'tab' ?\n            <Item\n              key=\"preview\"\n              style={active === 'preview' ? activeItemStyle : itemStyle}\n              onClick={() => onActiveChange('preview')}\n              hoverStyle={styles.hover}\n            >\n              <span style={styles.listItemA}>{'Preview'}</span>\n            </Item> : null\n        }\n        <Item\n          key=\"fullscreen\"\n          style={itemStyle}\n          hoverStyle={styles.hover}\n          onClick={onFullScreenChange}\n        >\n          <SvgIcon {...(fullscreen ? icons.minify : icons.expand)} />\n        </Item>\n      </ul>\n    </div>\n  )\n}\nControlBar.propTypes = {\n  mode: PropTypes.oneOf(['tab', 'split']).isRequired,\n  active: PropTypes.string.isRequired,\n  onActiveChange: PropTypes.func.isRequired,\n  fullscreen: PropTypes.bool.isRequired,\n  onFullScreenChange: PropTypes.func.isRequired,\n}\nexport default ControlBar\n"]}